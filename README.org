#+html_head: <link rel="stylesheet" type="text/css" href="htmlize.css"/>
#+html_head: <link rel="stylesheet" type="text/css" href="readtheorg.css"/>

#+html_head: <script src="jquery.min.js"></script>
#+html_head: <script src="bootstrap.min.js"></script>
#+html_head: <script type="text/javascript" src="readtheorg.js"></script>

#+html_head: $$\def\IF#1{[\hspace{-0.8mm}[#1]\hspace{-0.8mm}]}$$

#+Author: Julian Grove
#+Title: Computational Semantics, Fall 2023
#+bibliography: ur-comp-sem-2023.bib

* Overview
  Welcome to Computational Semantics!

  I'm [[https://juliangrove.github.io/][Julian Grove]], a post-doc in the [[http://factslab.io/][FACTS.lab]] directed by [[http://aaronstevenwhite.io/][Aaron Steven White]].
  I'm teaching Computational Semantics this semester in order for us to explore
  how functional programming, and specifically the λ-calculus, can be used as a
  powerful tool in the semantic analysis of natural language, as well as the
  computational modeling of linguistic behavior.

  We'll make heavy use of the [[https://www.haskell.org/][Haskell]] programming language throughout, as we
  rely on it as a metalanguage to state our theories. Thus the course is aimed
  primarily at graduate students in Linguistics or Computer Science; but more
  broadly, it could be interesting to anyone who meets one of the following
  descriptions:
  - has a background in linguistic semantics and hopes to learn (i) how semantic
    theory can benefit from the incorporation of functional programming
    techniques; and (ii) how semanticists can benefit from implementing their
    theories as runnable code
  - has a functional programming background and hopes to find out how functional
    programming techniques have been useful in the analysis of natural language
    meaning and inference
  - has an experimental linguistics background and wants to learn how semantic
    theory and functional programming can join forces to help vet linguistic
    theories against experimental data
  - wants to learn Haskell  
  It'll be easier to approach the course if you already have some programming
  background, though functional programming, per se, isn't necessary. That said,
  we'll spend the first few classes going over Haskell basics; but we'll launch
  into the main topics pretty quickly.

  The general trajectory of the course will be as follows. In the first part,
  we'll cover the untyped λ-calculus and type theory. This will take a little
  bit of time because we'll be building everything from the ground up, covering
  the syntax of each, as well as their operational semantics and the so-called
  ``Curry-Howard correspondence''.

  In the second part, we'll use the tools developed in the first part in order
  to study the compositional semantics of natural language (English) by building
  fragments. We'll enrich our semantic fragments with theories of computational
  effects; and finally, things will culminate in an approach to theorizing about
  human linguistic  behavior (in an experimental setting) in terms of Bayesian
  computational models. As we'll see, the theories of computational effects
  we'll have investigated will be important here.
 
  We'll rely on the following schedule, which I will tweak throughout the
  semester (though not in any way that affects the basic structure of the
  course). My general expectation is that everything will take longer than I
  think it will now.

* Schedule
  | Date          | Topic                                                                    | Notes (with exercises)            | Resources                                                                                    |
  |---------------+--------------------------------------------------------------------------+-----------------------------------+----------------------------------------------------------------------------------------------|
  | August 30     | Formal preliminaries                                                     | [[./notes/aug30/formal_preliminaries.html][Practice with sets]]; [[./notes/aug30/course_themes.html][Course themes]] | [cite/t:@partee_mathematical_1990]                                                           |
  | September 6   | Haskell: variables, data types, patterns, and recursion                  | [[./notes/sept6/sept6.html][Sept6 notes]]                       | [[http://learnyouahaskell.com/chapters][Learn You a Haskell]]                                                                          |
  | September 11  | Haskell: type classes and higher-order polymorphism                      | [[./notes/sept11/sept11.html][Sept11 notes]]                      | [[http://learnyouahaskell.com/chapters][Learn You a Haskell]]                                                                          |
  | September 13  | Untyped λ-calculus: what is it?                                          | [[./notes/sept13/sept13.html][Sept13 notes]]                      | [[http://learnyouahaskell.com/chapters][Learn You a Haskell]]                                                                          |
  | Septemeber 18 | Untyped λ-calculus: Church encodings                                     | [[./notes/sept18/sept18.html][Sept18 notes]]                      | [[http://learnyouahaskell.com/chapters][Learn You a Haskell]], [[./readings/barendregt.pdf][Barendregt: λ-calculi with types]], [[./readings/lctm.pdf][Krivine: λ-caluclus: types and models]] |
  | September 20  | Untyped λ-calculus: natural number arithmetic                            | [[./notes/sept20/sept20.html][Sept20 notes]]                      |                                                                                              |
  | Septemeber 25 | Untyped λ-calculus: fixed points and recursive functions                 |                                   |                                                                                              |
  | September 27  | Propositional logic: natural deduction                                   |                                   |                                                                                              |
  | October 2     | Propositional logic: minimal logic, proofs, and reductions               |                                   |                                                                                              |
  | October 4     | Propositional logic: structural rules                                    |                                   |                                                                                              |
  | October 9     | Applicative categorial grammar                                           |                                   |                                                                                              |
  | October 11    | Term-theoretic fragments                                                 |                                   |                                                                                              |
  | October 18    | Model-theoretic fragments                                                |                                   |                                                                                              |
  | October 23    | The $\IF{\cdot}$ pipeline                                                |                                   |                                                                                              |
  | October 25    | Logical detour: proving in classical FOL                                 |                                   |                                                                                              |
  | October 30    | Proof-theoretic fragments                                                |                                   |                                                                                              |
  | November 1    | Interpretation with a knowledge base                                     |                                   |                                                                                              |
  | November 6    | Abstract interfaces: functors (can't do much)                            |                                   |                                                                                              |
  | November 8    | Abstract interfaces: applicative functors and composition                |                                   |                                                                                              |
  | November 13   | Abstract interfaces: monads, scopal composition, and /in situ/ composition |                                   |                                                                                              |
  | November 15   | Probabilistic programming with finite distributions                      |                                   |                                                                                              |
  | November 20   | Probabilistic semantics via ~Reader~                                       |                                   |                                                                                              |
  | November 27   | Hybrid probabilistic/FOL systems                                         |                                   |                                                                                              |
  | November 29   | Expanding the probabilistic interface                                    |                                   |                                                                                              |
  | December 4    | Two levels of probabilistic involvement                                  |                                   |                                                                                              |
  | December 6    | Probabilistic programs as Bayesian models: part 1                        |                                   |                                                                                              |
  | December 11   | Probabilistic programs as Bayesian models: part 2                        |                                   |                                                                                              |
  | December 13   |                                                                          |                                   |                                                                                              |

* Installing Haskell
  This course will be [[https://www.haskell.org/][Haskell]]-based, so if you don't have a Haskell development
  environment installed on your machine, you'll need to install one.

  You have a number of options here. One common way to do install Haskell is
  using a tool called [[https://docs.haskellstack.org/en/stable/README/][~stack~]], which provides the following functionality:
  - It supplies ghc, the standard Haskell compiler, along with ghci, its
    associated interactive environment (i.e., a repl).
  - It supplies ~base~, the package containing the standard Haskell libraries
    that go into the default prelude.
  - It interacts with the [[https://www.stackage.org/][Stackage repository]], which provides many libraries
    that you can use in Haskell projects.
  - It can be used as a build tool, i.e., to compile binaries, open a repl,
    provide code documentation (via [[https://hackage.haskell.org/package/haddock][Haddock]]) in HTML format from annotated
    Haskell code.

** Using Windows or Linux
   If you are on a Linux distribution or Windows, you should try installing
   stack manually using [[https://docs.haskellstack.org/en/stable/README/#how-to-install][these instructions]]. If you are on Linux and want to
   install it from a repository provided by your distribution, this is possible,
   but it can sometimes be difficult to configure properly. 

** Using MacOS
  If you are on macOS, you can install stack using [[https://brew.sh/][~homebrew~]]. You should first
  install the xcode developer utilities:
  #+begin_src bash
$ xcode-select --install
  #+end_src
  To install homebrew, follow the instructions [[https://brew.sh/][here]]. You can then install stack
  by running:
  #+begin_src bash
$ brew install haskell-stack
  #+end_src
  After doing this, you may need to update gcc, which you can do using homebrew.

  Another option for macOS users is to install [[https://www.haskell.org/ghcup/][~GHCup~]] by following the
  instructions provided [[https://www.haskell.org/downloads/][here]].

** Using Nix shells
   I tend to run Haskell only inside of [[https://nixos.org/][~nix~]] shells. During development, these
   are automatically invoked by [[https://www.gnu.org/software/emacs/][Emacs]] using the amazing [[https://github.com/jyp/dante][~dante~]] package.

   The following shell installs ~base~ without any special packages:
   #+begin_src nix
let nixpkgs_source = (fetchTarball https://github.com/NixOS/nixpkgs/archive/nixos-23.05.tar.gz);
in
{ pkgs ? import nixpkgs_source {
    inherit system;
  }
, system ? builtins.currentSystem
}:
let
  ghc = pkgs.haskellPackages.ghcWithPackages (ps: with ps; ([
    cabal-install
  ]));
in
pkgs.stdenv.mkDerivation {
  name = "my-env-0";
  buildInputs = [
    ghc
  ];
  shellHook = ''
    export LANG=C.UTF-8
    export LC_ALL=C.UTF-8
    eval $(egrep ^export ${ghc}/bin/ghc)
  '';
}
   #+end_src

* Your development environment
  You can develop Haskell code using whatever text editor you want! But for
  Haskell, I would very highly recommend [[https://www.gnu.org/software/emacs/][Emacs]]. I use [[https://github.com/haskell/haskell-mode][~haskell-mode~]] along with
  [[https://github.com/jyp/dante][~dante~]] and [[https://github.com/jyp/attrap/tree/master][~attrap~]], with the following configuration in my init file:
  #+begin_src lisp
;; haskell
(require 'haskell-mode)
(custom-set-variables '(haskell-process-type 'cabal-repl))
(require 'haskell-interactive-mode)
(require 'haskell-process)
(custom-set-variables
 '(haskell-process-suggest-remove-import-lines t)
 '(haskell-process-auto-import-loaded-modules t)
 '(haskell-process-log t))
(add-hook 'haskell-mode-hook 'interactive-haskell-mode)

(defun insert-pragma ()
  (interactive)
  (insert "{-# LANGUAGE  #-}\n")
  (backward-char 5))
(defun add-haskell-pragma-binding ()
   (local-set-key (kbd "C-x p") #'insert-pragma))
(add-hook 'haskell-mode-hook #'add-haskell-pragma-binding)

(defun insert-brackets ()
  (interactive)
  (insert "{-#  #-}")
  (backward-char 4))
(defun add-haskell-brackets-binding ()
   (local-set-key (kbd "C-x r") #'insert-brackets))
(add-hook 'haskell-mode-hook #'add-haskell-brackets-binding)

(defun insert-repl ()
  (interactive)
  (insert "-- >>> \n")
  (backward-char 1))
(defun add-haskell-repl-binding ()
   (local-set-key (kbd "C-x i") #'insert-repl))

(use-package dante
  :after haskell-mode
  :commands 'dante-mode
  :init
  (add-hook 'haskell-mode-hook 'flycheck-mode)
  (add-hook 'haskell-mode-hook 'dante-mode)
  (add-hook 'haskell-mode-hook #'add-haskell-repl-binding))
(setq dante-debug '(inputs outputs responses))
(setq dante-repl-command-line '("nix-shell" "--run" "cabal repl"))
(use-package attrap
  :ensure t
  :bind (("C-x /" . attrap-attrap))) ;; use any binding of your choice
  #+end_src

* Logistics
** Office hours
   I'll hold office hours every Monday and Tuesday from 12-1pm. My office is 507
   Lattimore Hall.

** Assignments
   This course will have weekly pair of assignments (each given at the end of
   each set of notes), which will be graded Pass/Fail, as well a slightly longer
   final assignment, which will be given an actual letter grade. Final grades
   will be calculated taking both into account.

   Each assignment will be due a week after it is assigned---so an assignment
   posted on Monday will be due the following Monday, and an assignment posted
   on Wednesday will be due the following Wednesday. Assignments can be
   submitted in class or as a PDF, which you can either email to me or message
   to me on Zulip.

** Zulip
   There is a Zulip for this course. I'll use it to post updates. You should use
   it to post questions/discussion.

* Useful resources
  [[http://learnyouahaskell.com/chapters][Learn You a Haskell]]
  [cite/n:@barendregt_lambda_2012]
  [cite/n:@blackburn_representation_2005]
  [cite/n:@jansson_domain-specific_2022]
  [cite/n:@partee_mathematical_1990]
  [cite/n:@thompson_type_1999]
  [cite/n:@van_eijck_computational_2010]
  #+print_bibliography:
